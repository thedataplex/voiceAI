window.fun_address = function fun_address()
{
	
	fun_speak(speak_address_header);
	output_address.innerHTML = speak_address_header;

	navigator.mediaDevices.getUserMedia({ audio: true })
	.then(stream => {
         
		// Initialize the media recorder object
		audioRecorder_address = new MediaRecorder(stream);
            
		// AddressDataAvailable event is fired when the recording is stopped
		audioRecorder_address.addEventListener('dataavailable', e => {
			audioChunks_address.push(e.data);
		});
            
		// start recording when the start button is clicked
		startButton_address.addEventListener('click', () => {
			//fun_speak(speak_address_header);
			audioChunks_address = [];
			audioRecorder_address.start();
			output_address.innerHTML = 'Recording started for Patient Address! Speak now. When you are done, Press Stop Button';
		});


		// stop recording when the stop button is clicked
		stopButton_address.addEventListener('click', () => {
			audioRecorder_address.stop();
			output_address.innerHTML = 'Recording stopped for Patient Address! Click on Next button to switch to next field OR the Play button to play the recorded audio.';
			//fun_contactnum();
			fun_speak(output_address.innerHTML);
		});


		nextButton_address.addEventListener('click', () => {
			fun_contactnum();
		});
            
		// play the recorded audio when the play button is clicked
		playButton_address.addEventListener('click', () => {
			//output_address.innerHTML = 'Playing the recorded audio for Patient Address!';
			//audioRecorder_address.stop();
			fun_stop_recording_all();
			const blobObj = new Blob(audioChunks_address, { type: 'audio/webm' });
			const audioUrl = URL.createObjectURL(blobObj);
			const audio = new Audio(audioUrl);
			fun_speak(speak_address_footer);
			audio.play();
		});
	}).catch(err => {
		// If the user denies permission to record audio, then display an error.
		console.log('Error: ' + err);
	});
}
