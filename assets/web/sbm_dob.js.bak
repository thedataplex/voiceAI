window.fun_dob = function fun_dob() 
{
	//output_dob.innerHTML = "fun_dob invoked";
	fun_show(div_dob);
	fun_speak(speak_dob_header, speech_dob);
	output_dob.innerHTML = speak_dob_header;

	navigator.mediaDevices.getUserMedia({ audio: true })
	.then(stream => {
         
		// Initialize the media recorder object
		audioRecorder_dob = new MediaRecorder(stream);
            
		// DOBDataAvailable event is fired when the recording is stopped
		audioRecorder_dob.addEventListener('dataavailable', e => {
			audioChunks_dob.push(e.data);
		});
            
		// start recording when the start button is clicked
		startButton_dob.addEventListener('click', () => {
			//fun_speak(speak_dob_header);
			audioChunks_dob = [];
			audioRecorder_dob.start();
			output_dob.innerHTML = "Recording started for Patient's Date of Birth! Speak now. When you are done, Press Stop Button";
		});


		// stop recording when the stop button is clicked
		stopButton_dob.addEventListener('click', () => {
			audioRecorder_dob.stop();
			output_dob.innerHTML = "Recording stopped for Patient's Date of Birth! Click on the Next button to switch to next field OR the Play button to play the recorded audio.";
			//fun_address();
			fun_speak(output_dob.innerHTML);
		});

		nextButton_dob.addEventListener('click', () => {
			fun_address();
		});
            
		// play the recorded audio when the play button is clicked
		playButton_dob.addEventListener('click', () => {
			//output_dob.innerHTML = "Playing the recorded audio for Patient's Date of Birth!";
			//audioRecorder_dob.stop();
			fun_stop_recording_all();
			const blobObj = new Blob(audioChunks_dob, { type: 'audio/webm' });
			const audioUrl = URL.createObjectURL(blobObj);
			const audio = new Audio(audioUrl);
			fun_speak(speak_dob_footer);
			audio.play();
		});
	}).catch(err => {
		// If the user denies permission to record audio, then display an error.
		console.log('Error: ' + err);
	});
}
